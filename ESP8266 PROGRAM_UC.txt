/////////////////////////////////////////////////////////BLYNK
#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#define BLYNK_AUTH_TOKEN "7RfrLAB9M3if74__SPHe9nOn6J7vx4RS"
char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "MYWIFI";  // WIFI Name
char pass[] = "ab de 17";  // WIFI Password
////////////////////////////////////////////////////////RTC
#include <NTPClient.h>
#include <WiFiUdp.h>
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "in.pool.ntp.org", 19800, 60000);
int time_blynk;
int HH, MM,final_time;
int Timer_status;
int Timer_Activate;
////////////////////////////////////////////////////////////Server
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
String apiKeyValue = "tPmAT5Ab3j7F9";
String sensorName = " ";
String sensorLocation = "EKM";
#define ON_Board_LED 2 //Blue LED
////////////////////////////////////////////////////////////////

String myString;
String Air_Temp;
String Air_Hum;
String Body_Temp;
String Fan_Speed;

float Air_Temp_Blynk ;
float Air_Hum_Blynk;
float Body_Temp_Blynk;
int Fan_Speed_Blynk;


int Mode_pin=5;//D1
int Fan_pin=4;//D2
int Data;
int Fan_Data;
int Mode_data;

signed long start;

void setup() {

 Serial.begin(115200);
 Blynk.begin(auth, ssid, pass,"blynk.cloud",80);
 timeClient.begin();
 //////////////////////////////////////////////////////////////////////////
 pinMode(ON_Board_LED,OUTPUT);
 WiFi.begin(ssid, pass);
 Serial.println("Connecting");
while(WiFi.status() != WL_CONNECTED)
   { 
    delay(500);
    Serial.print(".");
    digitalWrite(ON_Board_LED, LOW);
    delay(250);
    digitalWrite(ON_Board_LED, HIGH);
    delay(250);
    }

  Serial.println("");
  Serial.print("Connected to WiFi network with IP Address: ");
  Serial.println(WiFi.localIP());
  digitalWrite(ON_Board_LED, LOW);
  delay(100);
//////////////////////////////////////////////////////////////////////////// 
 pinMode(Mode_pin,OUTPUT);
 pinMode(Fan_pin,OUTPUT);
 
 

}



BLYNK_WRITE(V6)
{
 time_blynk = param.asInt();
}
////////////////////////////////////////////////Fan 
BLYNK_WRITE(V0)
{
Data = param.asInt();
  if(Data == 1)
  {
   Fan_Data=1;
  }
  if(Data == 0){
   Fan_Data=0;
  }
}
////////////////////////////////////////////////Mode Selection
BLYNK_WRITE(V1)
{
Data = param.asInt();
  if(Data == 1)
  {
   Mode_data=1; //Remote control
  }
  if(Data == 0){
   Mode_data=0;  //Automatic mode
  }
}
////////////////////////////////////////////////Timer Selection
BLYNK_WRITE(V9)
{
 Data = param.asInt();
   if(Data == 1)
  {
   Timer_Activate=1; //Auto mode without Timing fuction
  }
  if(Data == 0){
   Timer_Activate=0;  ////Auto mode with Timing fuction
  }
}

void loop() {
Blynk.run();
///////////////////////////////////////////////////////DATA to Arduino/Mode_Selection
if(Mode_data==1){ ///////////////AUTOMATIC MODE
  digitalWrite(Mode_pin,HIGH);
  Fan_Data=0;
  if(Timer_status==1){///////////With Timer
  digitalWrite(Fan_pin,HIGH);
  Blynk.virtualWrite(V7,1);
  Blynk.virtualWrite(V0,1); 
  Blynk.virtualWrite(V8,Fan_Speed_Blynk);     
  }
  if(Timer_Activate==1){///////////Without Timer
  digitalWrite(Fan_pin,HIGH);
  Blynk.virtualWrite(V0,1);
  Blynk.virtualWrite(V8,Fan_Speed_Blynk); 
  }
  if(Timer_status==0 && Timer_Activate==0){
  digitalWrite(Fan_pin,LOW);
  Blynk.virtualWrite(V7,0);
  Blynk.virtualWrite(V0,0);
  Blynk.virtualWrite(V8,0); 
  }
}

if(Mode_data==0){ ////////////////REMOTE MODE
  Blynk.virtualWrite(V9,0);
  Timer_Activate=0;
  digitalWrite(Mode_pin,LOW);
  
  if(Fan_Data==1){
  digitalWrite(Fan_pin,HIGH);
  Blynk.virtualWrite(V8,255);
  Blynk.virtualWrite(V0,1);  
  }
  if(Fan_Data==0){
  digitalWrite(Fan_pin,LOW);
  Blynk.virtualWrite(V8,0);
  Blynk.virtualWrite(V0,0); 
  }
}



//////////////////////////////////////////////////////////////RTC
timeClient.update();
  HH = timeClient.getHours();
  MM = timeClient.getMinutes();
     final_time = 3600*HH + 60*MM;
 if (time_blynk == final_time){
     Serial.println("..............TIMER ACTIVE..............");
     Timer_status=1;
  }
  if(time_blynk != final_time){
     Timer_status=0;
  }
  






///////////////////////////////////////////////DECODE SECTION
if( Serial.available()>0)
{
myString = Serial.readStringUntil('\n');
Serial.print("Data from Arduino: ");
Serial.println(myString);

Air_Temp = getValue(myString, ',', 0);
Air_Hum = getValue(myString, ',', 1);
Fan_Speed = getValue(myString, ',', 2);
Body_Temp = getValue(myString, ',', 3);

Air_Temp_Blynk= Air_Temp.toFloat();
Air_Hum_Blynk= Air_Hum.toFloat();
Fan_Speed_Blynk= Fan_Speed.toInt();
Body_Temp_Blynk= Body_Temp.toFloat();

Data_to_Blynk();
}

if( Serial.available()==0)
{
  Print_data1();
  Print_data2();
}

///////////////////////////////////////////DATA to SERVER
if( millis() - start > 5000 ){
 Upload_data();
 start = millis();
}



}

void Print_data1(){
 Serial.print("Real Time HH: "); 
 Serial.print(HH);
 Serial.print("  MM: "); 
 Serial.print(MM);
 Serial.print("  Final Time: "); 
 Serial.print(final_time);
 Serial.print("  Time Frm Blynk: "); 
 Serial.println(time_blynk);
}

void Print_data2(){
  Serial.print("Air_Temp:"); 
  Serial.print(Air_Temp_Blynk);
  Serial.print("  Air_Hum:"); 
  Serial.print(Air_Hum_Blynk);
  Serial.print("  Fan_Speed:"); 
  Serial.print(Fan_Speed_Blynk);
  Serial.print("  Body_Temp:"); 
  Serial.println(Body_Temp_Blynk);
}
void Data_to_Blynk(){
Blynk.virtualWrite(V2,Body_Temp_Blynk);
Blynk.virtualWrite(V3,Air_Temp_Blynk);
Blynk.virtualWrite(V4,Air_Hum_Blynk);     
}

void Upload_data(){

  if(WiFi.status()== WL_CONNECTED )
  {
  digitalWrite(ON_Board_LED, LOW);

      HTTPClient http; 
      http.begin("http://192.168.36.125/sensordata/post-esp-data.php");
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");  
      String httpRequestData = "api_key=" + apiKeyValue + "&sensor=" + sensorName+ "&location=" + sensorLocation + "&value1=" + Air_Temp + "&value2=" + Air_Hum + 
      "&value3=" + Body_Temp + "";  
      Serial.print("Upload_Data: ");
      Serial.println(httpRequestData); 
      int httpResponseCode = http.POST(httpRequestData);
      Serial.print("Upload_ResponseCode: ");
      Serial.println(httpResponseCode); 
      delay(1000);
  }
  else {
        Serial.println("WiFi Disconnected");
        digitalWrite(ON_Board_LED, HIGH);
        }
  
}









////////////////////////////////////////////////////////////////
String getValue(String data, char separator, int index)
{
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;

    for (int i = 0; i <= maxIndex && found <= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i+1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}